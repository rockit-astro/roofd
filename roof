#!/usr/bin/env python3
#
# This file is part of roofd.
#
# roofd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# roofd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with roofd.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for controlling roofd"""

import datetime
import glob
import os
import sys
import Pyro4
from warwick.observatory.roof import (
    Config,
    CommandStatus,
    RoofStatus,
    HeartbeatStatus)
from warwick.observatory.common import TFmt

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook


def run_command(command, args):
    """Runs a daemon command, handling error messages"""
    if 'ROOFD_CONFIG_PATH' in os.environ:
        config = Config(os.environ['ROOFD_CONFIG_PATH'])
    else:
        # Load the config file defined in the ROOFD_CONFIG_PATH environment variable or from the
        # default system location (/etc/roofd/). Exit with an error if zero or multiple are found.
        files = glob.glob("/etc/roofd/*.json")
        if len(files) != 1:
            print('error: failed to guess the default config file. ' +
                  'Run as ROOFD_CONFIG_PATH=/path/to/config.json roof <command>')
            return 1

        config = Config(files[0])

    try:
        ret = command(config, args)
    except KeyboardInterrupt:
        # ctrl-c terminates the running command
        ret = stop(config, args)

        # Report successful stop
        if ret == 0:
            ret = -100
    except Pyro4.errors.CommunicationError:
        ret = -101

    # Print message associated with error codes, except for -1 (error handled locally)
    if ret not in [-1, 0]:
        print(CommandStatus.message(ret))
    sys.exit(ret)


def print_status(config, _):
    """Prints the roof status in human-readable form"""
    with config.daemon.connect() as roof:
        status = roof.status()

    date = datetime.datetime.strptime(status['date'], '%Y-%m-%dT%H:%M:%SZ')
    eng_mode = TFmt.Red + 'ENABLED' if status['engineering_mode'] else TFmt.Green + 'DISABLED'
    siren_mode = TFmt.Green + 'ENABLED' if status['siren'] else TFmt.Red + 'DISABLED'

    print(f'Roof status at: {TFmt.Bold + str(date) + TFmt.Clear}')
    print(f'        Status: {RoofStatus.label(status["status"], formatting=True)}')
    print(f'     Eng. mode: {TFmt.Bold + eng_mode + TFmt.Clear}')
    print(f'         Siren: {TFmt.Bold + siren_mode + TFmt.Clear}')
    print(f'       Battery: {TFmt.Bold}{status["battery_voltage_mean"]:.2f}V{TFmt.Clear}')
    print(f'     Heartbeat: {HeartbeatStatus.label(status["heartbeat_status"], formatting=True)}')
    if status['heartbeat_status'] == 1:
        print(f'Time remaining: {TFmt.Bold}{status["heartbeat_remaining"]}s{TFmt.Clear}')
    return 0


def stop(config, _):
    """Stops any active roof movement"""
    with config.daemon.connect() as roof:
        return roof.stop()


def open_roof(config, _):
    """Opens the roof"""
    with config.daemon.connect(timeout=0) as roof:
        return roof.open()


def close_roof(config, _):
    """Closes the roof"""
    with config.daemon.connect(timeout=0) as roof:
        return roof.close()


def heartbeat(config, args):
    """Configure the auto-close heartbeat"""
    if args:
        with config.daemon.connect() as roof:
            if args[0] == 'disable':
                return roof.set_heartbeat_timer(0)

            if args[0] == 'enable':
                if len(args) > 1:
                    timeout = int(args[1])
                    if timeout > 0:
                        return roof.set_heartbeat_timer(timeout)
            print(f'usage: {SCRIPT_NAME} heartbeat enable <timeout in seconds>')
            return -1
    print(f'usage: {SCRIPT_NAME} heartbeat (disable|enable)')
    return -1


def engineering_mode(config, args):
    """Enable or disable engineering mode to disable roof movement"""
    if args:
        with config.daemon.connect() as roof:
            if args[0] == 'disable':
                return roof.set_engineering_mode(False)

            if args[0] == 'enable':
                return roof.set_engineering_mode(True)

    print(f'usage: {SCRIPT_NAME} engineering (disable|enable)')
    return -1


def siren(config, args):
    """Enable or disable siren"""
    if args:
        with config.daemon.connect() as roof:
            if args[0] == 'disable':
                return roof.set_siren(False)

            if args[0] == 'enable':
                return roof.set_siren(True)

    print(f'usage: {SCRIPT_NAME} siren (disable|enable)')
    return -1


def print_usage():
    """Prints the utility help"""
    print(f'Usage: {SCRIPT_NAME} <command>')
    print()
    print('   status        print a human-readable summary of the roof status')
    print('   open          open one or both shutters')
    print('   close         close one or both shutters')
    print('   stop          stop manual open/close command (excludes heartbeat)')
    print('   heartbeat     configure the roof auto-close timeout')
    print('   siren         configure the siren')
    print('   engineering   enable or disable engineering mode')
    print()

    return 1


if __name__ == '__main__':
    commands = {
        'status': print_status,
        'open': open_roof,
        'close': close_roof,
        'stop': stop,
        'heartbeat': heartbeat,
        'siren': siren,
        'engineering': engineering_mode,
    }

    if len(sys.argv) >= 2 and sys.argv[1] in commands:
        sys.exit(run_command(commands[sys.argv[1]], sys.argv[2:]))

    sys.exit(print_usage())
